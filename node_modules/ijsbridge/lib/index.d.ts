import { WebBridgeApiConstants } from "./define";
import "./interface";
export declare const setDevelopmentMode: (isDev: boolean) => void;
export declare const WebBridgeApi: {
    requestApi: (api: WebBridgeApiConstants, params: any) => Promise<BridgeRequestResult>;
    defineApi: (api: String, handle: Function) => Promise<boolean>;
    ping(input: any): Promise<any>;
    requireVersion(input: Object): Promise<any>;
    sysinfo(): Promise<ResultObject>;
    scanCode(input: Object): Promise<ResultObject>;
    authorize(input: Object): Promise<ResultObject>;
    getUserInfo(input: Object): Promise<ResultObject>;
    fetch(input: FetchInput): Promise<ResultObject>;
    request(input: RequestInput): Promise<ResultObject>;
    router(input: RouterInput): Promise<ResultObject>;
    showWebApp(input: WebAppInput): Promise<ResultObject>;
    showToast(input: ToastInput): Promise<ResultObject>;
    showDialog(input: DialogInput): Promise<ResultObject>;
    chooseImage(input: Object): Promise<ResultObject>;
    chooseVideo(input: Object): Promise<ResultObject>;
    showImageViewer(input: ViewImage[]): Promise<ResultObject>;
    showFullVideoPlayer(input: VideoInfo): Promise<ResultObject>;
    requestFullscreenVideoPlay(input: RequestFullscreenVideoPlayInput): Promise<ResultObject>;
    checkPermission(input: any): Promise<ResultObject>;
    audioRecord(input: AudioRecordInput): Promise<ResultObject>;
    share(input: ShareInput): Promise<ResultObject>;
    openLink(input: LinkInput): Promise<ResultObject>;
    showPickerMenu(input: PickerMenuInput): Promise<ResultObject>;
    launchWechatProgram(input: LaunchWechatProgramInput): Promise<ResultObject>;
    getCurrentPosition(input: CurrentPositionInput): Promise<ResultObject>;
    registerAppEvent(input: RegisterAppEventInput, listener: Function): Promise<void>;
    unRegisterAppEvent(input: UnRegisterAppEventInput): Promise<ResultObject>;
    triggerAppEvent(input: TriggerAppEventInput): Promise<ResultObject>;
    orientation(input: OrientationControlInput): Promise<ResultObject>;
    connectDlna(input: DlnaControlInput): Promise<ResultObject>;
    musicControl(input: MusicControlInput): Promise<ResultObject>;
};
